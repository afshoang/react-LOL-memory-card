{"version":3,"sources":["components/Card.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","champion","handleClick","className","onClick","src","image","alt","charAt","toUpperCase","slice","Navbar","score","bestScore","id","App","useState","setScore","setBestScore","listChampions","setListChampions","gameReset","map","clicked","console","log","length","changedChampions","cham","useEffect","champions","arr","i","j","Math","floor","random","shuffelChampions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAsBeA,EApBF,SAAC,GAA+B,IAExBC,EAFLC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAMxB,OACE,qBAAKC,UAAU,SAASC,QAAS,kBAAMF,EAAYD,IAAnD,SACE,sBAAKE,UAAU,gBAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAKE,IAAKJ,EAASK,MAAOC,IAAKN,EAASD,SAE1C,qBAAKG,UAAU,aAAf,SACE,sBAAMA,UAAU,SAAhB,UAXWH,EAWyBC,EAASD,KAV5CA,EAAKQ,OAAO,GAAGC,cAAgBT,EAAKU,MAAM,cCetCC,EAlBA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACvB,OACE,qBAAKV,UAAU,mBAAf,SACE,qBAAIA,UAAU,0BAAd,UACE,qBAAKE,IAAI,sBAAsBS,GAAG,aAAaP,IAAI,SACnD,qBAAKJ,UAAU,UAAf,yBAEA,wJAEA,sBAAKA,UAAU,QAAf,UACE,2CAAcS,KACd,gDAAmBC,c,OCqEdE,MA7Ef,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNJ,EADM,KACCK,EADD,OAEqBD,mBAAS,GAF9B,mBAENH,EAFM,KAEKK,EAFL,OAG6BF,mBAAS,IAHtC,mBAGNG,EAHM,KAGSC,EAHT,KAiBb,SAASC,IACHT,EAAQC,GACVK,EAAaN,GAEfK,EAAS,GAETG,GAAiB,WAEfD,EAAcG,KAAI,SAACrB,GAIjB,OAHIA,EAASsB,UACXtB,EAASsB,SAAU,GAEdtB,QAKb,SAASC,EAAYD,GACnBuB,QAAQC,IAAIxB,EAASD,MAEjBY,IAAUO,EAAcO,QAC1BL,IAEF,IAAMM,EAAmBR,EAAcG,KAAI,SAACM,GAa1C,OAZIA,EAAKd,KAAOb,EAASa,KAEnBc,EAAKL,SACHX,EAAQC,GACVK,EAAaN,GAEfS,MAEAO,EAAKL,SAAU,EACfN,GAAS,kBAAML,EAAQ,OAGpBgB,KAETR,EAAiBO,GAGnB,OArDAE,qBAAU,WACRT,EAAiBU,KAChB,IAoDD,qCACE,cAAC,EAAD,CAAQlB,MAAOA,EAAOC,UAAWA,IACjC,qBAAKV,UAAU,qBAAf,SApDJ,SAA0B4B,GACxB,IAAK,IAAIC,EAAID,EAAIL,OAAS,EAAGM,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADD,EAEpB,CAACD,EAAIE,GAAIF,EAAIC,IAA/BD,EAAIC,GAFkC,KAE9BD,EAAIE,GAF0B,KAIzC,OAAOF,EAgDFM,CAAiBlB,GAAeG,KAAI,SAACrB,GACpC,OACE,cAAC,EAAD,CACEA,SAAUA,EACVC,YAAaA,GACRD,EAASD,WAKtB,wBAAQI,QAASF,QCjERoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8c6d046c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ champion, handleClick }) => {\r\n  // Capialize first letter of champions\r\n  function captalize(name) {\r\n    return name.charAt(0).toUpperCase() + name.slice(1);\r\n  }\r\n\r\n  return (\r\n    <div className='column' onClick={() => handleClick(champion)}>\r\n      <div className='ui fluid card'>\r\n        <div className='image'>\r\n          <img src={champion.image} alt={champion.name} />\r\n        </div>\r\n        <div className='content ui'>\r\n          <span className='header'>{captalize(champion.name)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst Navbar = ({ score, bestScore }) => {\r\n  return (\r\n    <div className='ui centered grid'>\r\n      <h2 className='ui icon centered header'>\r\n        <img src='/champions/logo.png' id='header-img' alt='logo' />\r\n        <div className='content'>Memory Game</div>\r\n\r\n        <p>Hướng dẫn: Tích điểm bằng cách chọn 1 tướng 1 lần duy nhất</p>\r\n\r\n        <div className='score'>\r\n          <span>Score: {score}</span>\r\n          <span>Best Score: {bestScore}</span>\r\n        </div>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { useState, useEffect } from 'react';\nimport Card from './components/Card';\nimport Navbar from './components/Navbar';\nimport champions from './champions.json';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [listChampions, setListChampions] = useState([]);\n\n  useEffect(() => {\n    setListChampions(champions);\n  }, []);\n\n  function shuffelChampions(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  function gameReset() {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n    setScore(0);\n\n    setListChampions(() => {\n      // reset initial champios\n      listChampions.map((champion) => {\n        if (champion.clicked) {\n          champion.clicked = false;\n        }\n        return champion;\n      });\n    });\n  }\n\n  function handleClick(champion) {\n    console.log(champion.name);\n    // if max score\n    if (score === listChampions.length) {\n      gameReset();\n    }\n    const changedChampions = listChampions.map((cham) => {\n      if (cham.id === champion.id) {\n        // game over\n        if (cham.clicked) {\n          if (score > bestScore) {\n            setBestScore(score);\n          }\n          gameReset();\n        } else {\n          cham.clicked = true;\n          setScore(() => score + 1);\n        }\n      }\n      return cham;\n    });\n    setListChampions(changedChampions);\n  }\n\n  return (\n    <>\n      <Navbar score={score} bestScore={bestScore} />\n      <div className='ui six column grid'>\n        {shuffelChampions(listChampions).map((champion) => {\n          return (\n            <Card\n              champion={champion}\n              handleClick={handleClick}\n              key={champion.name}\n            />\n          );\n        })}\n      </div>\n      <button onClick={handleClick}></button>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}